#!/usr/local/sal/Python.framework/Versions/Current/bin/python3
"""sal-submit

Coordinates running checkin modules and submitting their results to Sal.
"""


import argparse
import logging
import json
import os
import pathlib
import plistlib
import re
import stat
import subprocess
import tempfile

import requests.exceptions

import sal

from Foundation import NSDate

CHECKIN_MODULES_DIR = "/usr/local/sal/checkin_modules"


def main():
    args = get_args()
    log_level = get_log_level(args)
    logging.basicConfig(level=log_level, format="%(asctime)s %(levelname)s %(message)s")
    logging.info("%s Version: %s", os.path.basename(__file__), sal.__version__)
    logging.info("Sal client prefs:")
    prefs = sal.prefs_report()
    if args.url:
        prefs["ServerURL"] = {"value": args.url, "forced": "commandline"}
    if args.key:
        prefs["key"] = {"value": args.key, "forced": "commandline"}
    for k, v in prefs.items():
        logging.info(
            f'\t{k}: {v["value"]} ({"profile" if v["forced"] else "prefs"})'
        )

    exit_if_not_root()
    if sal.wait_for_script("sal-submit"):
        exit("Another instance of sal-submit is already running. Exiting.")
    if sal.wait_for_script("managedsoftwareupdate"):
        exit("managedsoftwareupdate is running. Exiting.")

    logging.info("Processing checkin modules...")
    script_results = sal.run_scripts(CHECKIN_MODULES_DIR)
    for message in script_results:
        logging.info(message)

    submission = sal.get_checkin_results()
    run_type = get_run_type(submission)
    run_plugins(run_type)

    remove_blacklisted_messages()
    remove_skipped_facts()
    sanitize_submission()

    report = sal.get_checkin_results()
    sal.setup_sal_client()
    if args.url:
        sal.get_sal_client().base_url = args.url
        logging.info("Server URL overridden with %s", args.url)

    if args.key:
        sesh = sal.get_sal_client().auth = ("sal", args.key)
        # Override the key in the report, since it's used for querying.
        report["Sal"]["extra_data"]["key"] = args.key
        logging.info("Machine group key overridden with %s", args.key)
    logging.debug("Checkin submission:")
    logging.debug(json.dumps(report, indent=4, default=sal.serializer))
    response = send_checkin(report)

    if response and response.status_code == 200:
        sal.set_sal_pref("LastCheckDate", NSDate.new())
        sal.clean_results()

    # Speed up manual runs by skipping these potentially slow-running,
    # and infrequently changing tasks.
    if run_type != "manual":
        send_inventory(submission["Machine"]["extra_data"]["serial"])
        send_catalogs()
        send_profiles(submission["Machine"]["extra_data"]["serial"])

    pathlib.Path("/Users/Shared/.com.salopensource.sal.run").unlink(missing_ok=True)

    logging.info("Checkin complete.")


def get_log_level(args):
    """Set the verbosity based on options."""
    loglevel = logging.INFO
    if args.debug:
        loglevel = logging.DEBUG
    return loglevel


def get_args():
    """Return commandline options."""
    parser = argparse.ArgumentParser()
    parser.add_argument(
        "-d",
        "--debug",
        default=False,
        action="store_true",
        help="Enable full debug output.",
    )
    parser.add_argument(
        "-v",
        "--verbose",
        default=False,
        action="store_true",
        help="Deprecated. Does nothing",
    )
    parser.add_argument(
        "-u", "--url", default=None, help="Override the server URL for testing."
    )
    parser.add_argument(
        "-k", "--key", default=None, help="Override the machine group key."
    )
    return parser.parse_args()


def exit_if_not_root():
    """Exit if the executing user is not root."""
    if os.geteuid() != 0:
        exit("Manually running this script requires sudo.")


def get_run_type(submission):
    munki = submission.get("Munki", {})
    munki_extras = munki.get("extra_data", {})
    return munki_extras.get("runtype", "")


def run_plugins(run_type):
    logging.info("Processing plugins...")
    plugin_results_path = pathlib.Path("/usr/local/sal/plugin_results.plist")
    try:
        run_external_scripts(run_type)
        plugin_results = get_plugin_results(plugin_results_path)
    finally:
        plugin_results_path.unlink(missing_ok=True)
    sal.set_checkin_results("plugin_results", plugin_results)


def run_external_scripts(run_type):
    external_scripts_dir = pathlib.Path("/usr/local/sal/external_scripts")

    if external_scripts_dir.exists():
        for folder in external_scripts_dir.iterdir():
            if str(folder).startswith("."):
                continue
            for script in folder.iterdir():
                if script.stat().st_mode & stat.S_IXUSR:
                    try:
                        subprocess.check_call(
                            [script, run_type],
                            stdout=subprocess.PIPE,
                            stderr=subprocess.PIPE,
                        )
                        logging.info("%s ran successfully.", script)
                    except OSError:
                        logging.warning("Couldn't run %s", script)
                    except subprocess.CalledProcessError:
                        logging.warning("%s had errors during execution!", script)
                else:
                    logging.warning("'%s' is not executable! Skipping.", script)


def get_plugin_results(plugin_results_plist):
    """ Read external data plist if it exists and return a list."""
    plist_data = []
    if plugin_results_plist.exists():
        try:
            plist_data = plistlib.loads(plugin_results_plist.read_bytes())
        except plistlib.InvalidFileException:
            logging.warning("Could not read external data plist.")
    else:
        logging.warning("No external data plist found.")

    return sal.unobjctify(plist_data)


def remove_blacklisted_messages():
    patterns = sal.sal_pref("MessageBlacklistPatterns", [])
    if patterns:
        compiled = [re.compile(p) for p in patterns]
        update = False
        submission = sal.get_checkin_results()

        for results in submission.values():
            if not isinstance(results, dict):
                # Handle any non-dict keys like plugin_results
                continue

            removals = []
            for message in results.get("messages", []):
                subject = message.get("text", "")
                if any(p.search(subject) for p in compiled):
                    removals.append(message)

            if removals:
                update = True
                for removal in removals:
                    logging.debug("Removing message: '%s'", removal)
                    results["messages"].remove(removal)

        if update:
            sal.save_results(submission)


def remove_skipped_facts():
    if skip_facts := sal.sal_pref("SkipFacts"):
        update = False
        submission = sal.get_checkin_results()

        for results in submission.values():
            if not isinstance(results, dict):
                # Handle any non-dict keys like plugin_results
                continue

            removals = []
            for fact in results.get("facts", []):
                if fact in skip_facts:
                    removals.append(fact)

            if removals:
                update = True
                for removal in removals:
                    logging.debug("Removing fact: '%s'", removal)
                    results["facts"].pop(removal)

        if update:
            sal.save_results(submission)


def sanitize_submission():
    """Clean submission json"""
    # Make sure we're not shipping up any null chars.
    submission = sal.get_checkin_results()
    # json will serialize null chars to '\\u0000', so we raw string it
    # not escape, and replace it with nothing.
    submission_str = json.dumps(submission).replace(r"\\u0000", "")
    sal.save_results(json.loads(submission_str))


def send_checkin(report):
    logging.info("Sending report")
    try:
        response = sal.get_sal_client().post("checkin/", json=report)
    except requests.exceptions.RequestException as error:
        logging.error("Failed to send report")
        logging.error(error)
        response = None
    return response


def send_inventory(serial):
    logging.info("Processing inventory...")
    managed_install_dir = sal.mac_pref(
        "ManagedInstalls", "ManagedInstallDir", "/Library/Managed Installs"
    )
    inventory_plist = pathlib.Path(managed_install_dir) / "ApplicationInventory.plist"
    logging.info("ApplicationInventory.plist Path: %s", inventory_plist)

    if inventory := inventory_plist.read_bytes():
        inventory_hash = sal.get_hash(inventory_plist)
        logging.info(f"Inventory hash: {inventory_hash}")
        serverhash = None
        sal_client = sal.get_sal_client()
        try:
            response = sal_client.get(f"inventory/hash/{serial}/")
        except requests.exceptions.RequestException as error:
            logging.error("Failed to get inventory hash")
            logging.error(error)
            return
        if response.status_code == 200 and response.text != inventory_hash:
            logging.info("Inventory is out of date; submitting...")
            inventory_submission = {
                "serial": serial,
                "base64bz2inventory": sal.submission_encode(inventory),
            }
            try:
                sal_client.post("inventory/submit/", data=inventory_submission)
            except requests.exceptions.RequestException as error:
                logging.error("Failed to submit inventory")
                logging.error(error)


def send_catalogs():
    logging.info("Processing catalogs...")
    managed_install_dir = sal.mac_pref(
        "ManagedInstalls", "ManagedInstallDir", "/Library/Managed Installs"
    )
    catalog_dir = pathlib.Path(managed_install_dir) / "catalogs"

    check_list = []
    if catalog_dir.exists():
        for catalog_file in catalog_dir.iterdir():
            # don't operate on hidden files (.DS_Store etc)
            if not str(catalog_file).startswith("."):
                catalog_hash = sal.get_hash(catalog_file)
                check_list.append(
                    {"name": str(catalog_file), "sha256hash": catalog_hash}
                )

        catalog_check_plist = plistlib.dumps(check_list)

    sal_client = sal.get_sal_client()
    machine_group_key = sal_client.auth[1]
    hash_submission = {
        "key": machine_group_key,
        "catalogs": sal.submission_encode(catalog_check_plist),
    }
    try:
        response = sal_client.post("catalog/hash/", data=hash_submission)
    except requests.exceptions.RequestException as error:
        logging.error("Failed to get catalog hashes")
        logging.error(error)
        return

    try:
        remote_data = plistlib.loads(response.content)
    except plistlib.InvalidFileException:
        remote_data = []

    for catalog in check_list:
        if catalog not in remote_data:
            contents = (pathlib.Path(catalog_dir) / catalog["name"]).read_bytes()
            catalog_submission = {
                "key": machine_group_key,
                "base64bz2catalog": sal.submission_encode(contents),
                "name": catalog["name"],
                "sha256hash": catalog["sha256hash"],
            }

            logging.info("Submitting Catalog: %s", catalog["name"])
            try:
                sal_client.post("catalog/submit/", data=catalog_submission)
            except requests.exceptions.RequestException as error:
                logging.error("Error while submitting Catalog: %s", catalog["name"])
                logging.error(error)


def send_profiles(serial):
    logging.info("Processing profiles...")
    temp_dir = tempfile.mkdtemp()
    profile_out = pathlib.Path(temp_dir) / "profiles.plist"

    cmd = ["/usr/bin/profiles", "-C", "-o", profile_out]
    dev_null = open(os.devnull, "w")
    try:
        subprocess.call(cmd, stdout=dev_null)
    except OSError:
        logging.warning("Couldn't output profiles.")
        return

    profiles = plistlib.loads(profile_out.read_bytes())
    profile_out.unlink()
    # Drop all of the payload info we're not going to actual store.
    for profile in profiles["_computerlevel"]:
        cleansed_payloads = [
            _payload_cleanse(p) for p in profile.get("ProfileItems", [])
        ]
        profile["ProfileItems"] = cleansed_payloads
    logging.debug(profiles)
    profile_submission = {
        "serial": serial,
        "base64bz2profiles": sal.submission_encode(plistlib.dumps(profiles)),
    }
    try:
        sal.get_sal_client().post("profiles/submit/", data=profile_submission)
    except requests.exceptions.RequestException as error:
        logging.error("Failed to submit profiles")
        logging.error(error)


def _payload_cleanse(payload):
    stored = ("PayloadIdentifier", "PayloadUUID", "PayloadType")
    return {k: payload[k] for k in stored}


if __name__ == "__main__":
    main()

